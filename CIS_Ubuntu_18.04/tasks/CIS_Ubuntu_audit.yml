---

- name: (Scored) check_1 Ensure the Log Config Module is Enabled
  shell: 'lsmod | egrep -i "cramfs|freevxfs|jffs2|hfs|hfsplus|udf"'
  register: filesystems_check
  failed_when: False

- name: (Scored) check_1.1.2 1.1.3 1.1.4 Ensure separate partition for /tmp and options
  shell: ' mount | grep "/tmp " '
  register: check_tmp
  failed_when: False

- name: (Scored) check_1.1.5 Ensure separate partition for /var
  shell: ' mount | grep "/var " '
  register: check_var
  failed_when: False

- name: (Scored) check_1.1.6 1.1.7 1.1.8 Ensure separate partition for /var/tmp
  shell: ' mount | grep "/var/tmp " '
  register: check_var_tmp
  failed_when: False

- name: (Scored) check_1.1.10 Ensure separate partition for /var/log
  shell: ' mount | grep "/var/log " '
  register: check_var_log
  failed_when: False

- name: (Scored) check_1.1.11 Ensure separate partition for /var/log/audit
  shell: ' mount | grep "/var/log/audit " '
  register: check_var_log_audit
  failed_when: False

- name: (Scored) check_1.1.12-14 Ensure separate partition for /home
  shell: ' mount | grep "/home " '
  register: check_home
  failed_when: False

- name: (Scored) check_1.1.14 Check values for /dev/shm
  shell: ' mount | grep "/dev/shm " '
  register: check_dev_shm
  failed_when: False

- name: (Scored) check_1.1.20 Ensure sticky bit is set on all world-writable directories
  shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d \\( -perm -0002 -a ! -perm -1000 \\) 2>/dev/null"
  register: check_1_1_20
  failed_when: False

- name: (Scored) check 1.1.21 Disable Automounting
  shell: systemctl is-enable autofs
  register: check_1_1_21
  failed_when: False

- name: (Scored) check 1.3.1 AIDE is installed
  shell: dpkg -s aide
  register: check_1_3_1
  failed_when: False

- name: (Scored) check 1.3.2 Ensure Filesystem is regularly checked (with aide)
  shell: (crontab -l | grep aide) || (grep -r aide /etc/cron.* /etc/crontab)
  register: check_1_3_2
  failed_when: False

- name: (Scored) check 1.4.1 Ensure Permissions on boot loader config are configured
  stat:
    path: /boot/grub/grub.cfg
  register: check_1_4_1
  failed_when: False

- name: (Scored) check 1.4.2 Ensure bootloader password is set
  shell: ' egrep "^set superusers|^password" /boot/grub/grub.cfg '
  register: check_1_4_2
  failed_when: False

- name: (Scored) check 1.4.3 Ensure authentication required for single user mode
  shell: 'grep ^root:[*\!]: /etc/shadow'
  register: check_1_4_3
  failed_when: False

- name: (Scored) check 1.5.1 Ensure core dumps are restricted
  shell: 'sysctl fs.suid_dumpable'
  register: check_1_5_1
  failed_when: False


#- name: debug check
#  debug:
#    var: stat

- name: "Create the final report of CIS Ubuntu Scored2 at {{ansible_date_time.date}}"
  template:
    src: CIS_Ubuntu_audit.j2
    dest: '/tmp/CIS_Ubuntu_benchmark.txt'
  delegate_to: localhost
  run_once: true

- name: CIS Ubuntu Benchmark output capture
  shell: "cat /tmp/CIS_Ubuntu_benchmark.txt"
  register: CIS_Ubuntu_report
  delegate_to: localhost
  run_once: true

- name: show me the patch report
  debug:
    var: CIS_Ubuntu_report.stdout
  delegate_to: localhost
  run_once: true

# Send the output to discord when we're ready

- name: Send something simple to sandbox server
  ansible_discord_webhook:
    webhook_url: "{{discord_webhook_url}}"
    content: "{{item}}"
  when: discord_webhook_url is defined
  delegate_to: localhost
  run_once: true
  loop:
    - "{{ 'CIS_Ubuntu_report.stdout' | regex_findall('\\b(.{2000})\\b') }}"

#Added because messages in discord have a 2000 u0nicode character limit
#- name: Send a file to sandbox channel in discord 
#  uri:
#    url: "{{discord_webhook_url}}"
#    method: 'POST'
#    body_format: form-urlencoded
#    headers:
#      Content-Type: 'multipart/form-data'
#    body: 
#      'file' : '/tmp/CIS_Ubuntu_benchmark.txt'
#      'payload_json' : {"embeds":[{"title": "CIS_Ubuntu_Benchmark"}]}
#  when: discord_webhook_url is defined
#  delegate_to: localhost
#  run_once: true
